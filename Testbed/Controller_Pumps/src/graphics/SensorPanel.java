/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphics;

import common.ControllerInterface;
import javax.swing.border.TitledBorder;

/**
 *
 * @author segovia
 */
public class SensorPanel extends javax.swing.JPanel {

    ControllerInterface ctl;
    int sensorId;
    
    /**
     * Creates new form SensorPanel
     */
    public SensorPanel() {
        initComponents();  
        sensor_measure.setText("No measurement");
    }
    
    public void setController(ControllerInterface ctl_param){
        ctl= ctl_param;
        ctl.subscribeSensorListener (sensorId, this);
    }
    
    public void updateSensorValue (double level){
        sensor_measure.setText(""+level);
    }
    
    public void setSensorId(int id){
        sensorId= id;
    }
    
    public SensorPanel(String title, int id, ControllerInterface controller) {
        initComponents();
        
        this.setVisible(true);
                
        TitledBorder border1 = new TitledBorder(title);
        border1.setTitleJustification(TitledBorder.CENTER);
        border1.setTitlePosition(TitledBorder.TOP);            
        this.setBorder(border1);         
                
        ctl = controller;
        sensorId = id;
        
    }
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text = new javax.swing.JLabel();
        sensor_measure = new javax.swing.JLabel();
        interrogation = new javax.swing.JButton();
        sychro = new javax.swing.JButton();
        disconection = new javax.swing.JButton();
        stopServer = new javax.swing.JButton();
        led_on = new javax.swing.JButton();
        led_off = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(400, 200));
        setPreferredSize(new java.awt.Dimension(400, 200));
        setLayout(new java.awt.GridLayout(4, 2));

        text.setText("Current measure:");
        add(text);
        add(sensor_measure);

        interrogation.setText("Interrogation");
        interrogation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interrogationActionPerformed(evt);
            }
        });
        add(interrogation);

        sychro.setText("Synchronization");
        sychro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sychroActionPerformed(evt);
            }
        });
        add(sychro);

        disconection.setText("Disconnection");
        disconection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconectionActionPerformed(evt);
            }
        });
        add(disconection);

        stopServer.setText("Stop Server");
        stopServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopServerActionPerformed(evt);
            }
        });
        add(stopServer);

        led_on.setText("LED ON");
        led_on.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                led_onActionPerformed(evt);
            }
        });
        add(led_on);

        led_off.setText("LED OFF");
        led_off.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                led_offActionPerformed(evt);
            }
        });
        add(led_off);
    }// </editor-fold>//GEN-END:initComponents

    private void interrogationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interrogationActionPerformed
        // TODO add your handling code here:
        ctl.sendInterrogationCommand(sensorId);
    }//GEN-LAST:event_interrogationActionPerformed

    private void sychroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sychroActionPerformed
        // TODO add your handling code here:
        ctl.sendSynchronizeClock(sensorId);
    }//GEN-LAST:event_sychroActionPerformed

    private void disconectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconectionActionPerformed
        // TODO add your handling code here:
        ctl.sendCloseConnection(sensorId);
    }//GEN-LAST:event_disconectionActionPerformed

    private void stopServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopServerActionPerformed
        // TODO add your handling code here:
        ctl.sendStopServer(sensorId);
    }//GEN-LAST:event_stopServerActionPerformed

    private void led_onActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_led_onActionPerformed
        // TODO add your handling code here:
        ctl.sendLedOn(sensorId);
    }//GEN-LAST:event_led_onActionPerformed

    private void led_offActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_led_offActionPerformed
        // TODO add your handling code here:
        ctl.sendLedOff(sensorId);
    }//GEN-LAST:event_led_offActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton disconection;
    private javax.swing.JButton interrogation;
    private javax.swing.JButton led_off;
    private javax.swing.JButton led_on;
    private javax.swing.JLabel sensor_measure;
    private javax.swing.JButton stopServer;
    private javax.swing.JButton sychro;
    private javax.swing.JLabel text;
    // End of variables declaration//GEN-END:variables
}
